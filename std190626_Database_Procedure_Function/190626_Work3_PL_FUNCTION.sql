--conn to hr, scott

--1) 두 숫자를 제공하면 덧셈을 해서 결과값을 반환하는 함수를 정의하시오.(함수명 add_num)
CREATE OR REPLACE FUNCTION ADD_NUM (IN_A IN NUMBER, IN_B IN NUMBER) RETURN NUMBER
IS 
    RESULT_OUT NUMBER;
BEGIN
    RESULT_OUT := (IN_A + IN_B);
    DBMS_OUTPUT.PUT_LINE('함수 끝');
    RETURN RESULT_OUT;
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외발생');
END;
/
SELECT * FROM USER_OBJECTS ORDER BY USER_OBJECTS.TIMESTAMP DESC;
VAR TEMPNUM1 NUMBER;
EXEC :TEMPNUM1 := ADD_NUM(5,7);
PRINT TEMPNUM1;

--2) 급여(보너스 포함)에 대한 세율을 다음과 같이 정의하는 함수를 작성하시오.
--급여가 월 $3,000보다 적으면 세율을 0% 적용하며, $3,000이상 $7,000 미만이면 10%, 
--$7,000이상 $10,000 미만이면 20%, $10,000을 이상이면 30%를 적용함
CREATE OR REPLACE FUNCTION CAL_TAX (IN_SAL IN NUMBER) RETURN NUMBER
IS 
    TAXRATE_OUT NUMBER;
BEGIN
    IF IN_SAL >= 10000 THEN
        TAXRATE_OUT := 0.3;
    ELSIF IN_SAL >= 7000 THEN
        TAXRATE_OUT := 0.2;
    ELSIF IN_SAL >= 3000 THEN
        TAXRATE_OUT := 0.1;
    ELSE
        TAXRATE_OUT := 0;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('입력받은 급여 : ' || IN_SAL);
    RETURN TAXRATE_OUT;
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외발생');
END;
/


SELECT * FROM USER_OBJECTS ORDER BY USER_OBJECTS.TIMESTAMP DESC;
VAR TEMPNUM_TAX NUMBER;
EXEC :TEMPNUM1 := CAL_TAX(1000);
PRINT TEMPNUM1;

--3) 부서번호를 입력하면 해당 부서에서 근무하는 사원 수를 반환하는 함수를 정의하시오.
--(함수명 get_emp_count)
CREATE OR REPLACE FUNCTION GET_EMP_COUNT (IN_DEPTNO IN NUMBER) RETURN NUMBER
IS 
    TOTAL_MEMBER NUMBER;
BEGIN
    TOTAL_MEMBER := 0;
    
    SELECT COUNT(FIRST_NAME) INTO TOTAL_MEMBER
    FROM employees E
    WHERE e.department_id = IN_DEPTNO;
    
    DBMS_OUTPUT.PUT_LINE('입력받은 부서번호 : ' || IN_DEPTNO);
    RETURN TOTAL_MEMBER;
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외발생');
END;
/
SELECT * FROM USER_OBJECTS ORDER BY USER_OBJECTS.TIMESTAMP DESC;
VAR EMP_COUNT NUMBER;
EXEC :EMP_COUNT := GET_EMP_COUNT(30);
PRINT EMP_COUNT ;
SELECT COUNT(FIRST_NAME) FROM EMPLOYEES WHERE department_id = 30;

--4) employees테이블을 이용해서 입사일을 제공하면 근무연차를 구하는 함수를 정의하시오.
--(소수점 자리 절삭, 함수명 get_info_hiredate)
CREATE OR REPLACE FUNCTION GET_INTFO_HIREDATE (IN_HIREDATE IN DATE) RETURN NUMBER
IS 
    WORKING_YEARS NUMBER;
    START_YEAR NUMBER;
    END_YEAR NUMBER;
BEGIN
    WORKING_YEARS := EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM IN_HIREDATE);
    
    DBMS_OUTPUT.PUT_LINE('입력받은 입사일 : ' || IN_HIREDATE);
    RETURN WORKING_YEARS;
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외발생');
END;
/
SELECT * FROM USER_OBJECTS ORDER BY USER_OBJECTS.TIMESTAMP DESC;
VAR WORKING_YEARS NUMBER;
EXEC :WORKING_YEARS := GET_INTFO_HIREDATE('1970/01/01');
PRINT EMP_COUNT ;

--5) employees테이블을 이용해서 사원번호를 입력하면 해당 사원의 관리자 이름을 구하는 함수를
--   정의하시오.(함수명 get_mgr_name)
CREATE OR REPLACE FUNCTION GET_MGR_NAME(IN_EMPNO IN NUMBER) RETURN VARCHAR2
IS 
    IN_NAME VARCHAR2(20);
    OUT_MGR_NAME VARCHAR2(20);    
BEGIN
    SELECT A.FIRST_NAME, B.FIRST_NAME INTO IN_NAME, OUT_MGR_NAME
    FROM EMPLOYEES A, EMPLOYEES B
    WHERE A.MANAGER_ID = B.EMPLOYEE_ID
        AND A.EMPLOYEE_ID = IN_EMPNO;
    
    DBMS_OUTPUT.PUT_LINE('입력받은 사원번호 : ' || IN_EMPNO);
    DBMS_OUTPUT.PUT_LINE('입력받은 사원이름 : ' || IN_NAME);
    RETURN OUT_MGR_NAME;
    
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외발생');
END;
/
SELECT * FROM USER_OBJECTS ORDER BY USER_OBJECTS.TIMESTAMP DESC;
VAR MGRNAME VARCHAR2(20);
EXEC :MGRNAME := GET_MGR_NAME(105);
PRINT MGRNAME ;
SELECT * FROM EMPLOYEES WHERE FIRST_NAME = 'Alexander';

-- 6) emp테이블(SCOTT)을 이용해서 사원번호를 입력하면 급여 등급을 구하는 함수를 정의하시오.
-- (4000~5000 A, 3000~4000미만 B, 2000~3000미만 C, 1000~200미만 D, 1000미만 F, 함수명 get_sal_grade)
CREATE OR REPLACE FUNCTION GET_SAL_GRADE(IN_EMPNO IN NUMBER) RETURN VARCHAR2
IS 
    OUT_GRADE VARCHAR2(10);   
    EMP_SAL NUMBER;
BEGIN
    SELECT SAL INTO EMP_SAL
    FROM EMP
    WHERE EMPNO = IN_EMPNO;
    
    IF EMP_SAL >= 4000 THEN        OUT_GRADE := 'A';
    ELSIF EMP_SAL >= 3000 THEN        OUT_GRADE := 'B';
    ELSIF EMP_SAL >= 2000 THEN        OUT_GRADE := 'C';
    ELSIF EMP_SAL >= 1000 THEN        OUT_GRADE := 'D';
    ELSE        OUT_GRADE := 'F';
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('입력받은 사원번호 : ' || IN_EMPNO);
    RETURN OUT_GRADE;
    
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('예외발생');
END;
/
SELECT * FROM USER_OBJECTS ORDER BY USER_OBJECTS.TIMESTAMP DESC;
VAR SAL_GRADE VARCHAR2(20);
EXEC :SAL_GRADE := GET_SAL_GRADE(9000);
PRINT SAL_GRADE ;
EXEC :SAL_GRADE := GET_SAL_GRADE(7839);
PRINT SAL_GRADE ;
EXEC :SAL_GRADE := GET_SAL_GRADE(7566);
PRINT SAL_GRADE ;
SELECT * FROM EMP ORDER BY SAL DESC;












